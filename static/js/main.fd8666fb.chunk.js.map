{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","likes","url","className","alt","style","objectFit","width","height","src","CardList","data","console","log","map","user","i","key","id","urls","small","first_name","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","overflow","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","Header","App","onRequestImages","onSearchChange","images","searchField","isPending","filteredImages","filter","image","toLowerCase","includes","connect","searchImages","requestImages","dispatch","event","payload","target","value","axios","get","process","then","response","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateImages","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fd8666fb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n const Card = ({name, likes, url}) => {\r\n\r\n    return (\r\n\r\n      <div className='pic tc br3 pa3 ma2 grow bw2 shadow-5 '>\r\n        <img alt='unsplash' style={{objectFit: 'cover', width: '100%', height: '16rem'}} src={`${url}`} />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>Likes: {likes}</p>\r\n        </div> \r\n      </div>\r\n    \r\n    )\r\n  };\r\n\r\n\r\n  export default Card;","import React from \"react\";\r\nimport Card from './Card';\r\n// import axios from 'axios';\r\n\r\nconst CardList = ({data}) => {\r\n  console.log(data)\r\n  \r\n  return(\r\n    <div className = \"contain-pics\">\r\n      {\r\n        data.map((user,i) => {\r\n        return (\r\n\r\n        <Card \r\n          key={data[i].id}\r\n          id={data[i].id}\r\n          url={data[i].urls.small}\r\n          name={data[i].user.first_name}\r\n          likes={data[i].likes}\r\n          />\r\n        )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className = 'pa2 search-box'>\r\n                <div className=\"content\">\r\n                    <input\r\n                        aria-label='search images'\r\n                        className=\"pa3\"\r\n                        type='search'\r\n                        placeholder='search images'\r\n                        onChange={searchChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n return (\r\n     <div style={{overflow: 'scroll', border: '5px solid white', height: '800px'}}>\r\n         {props.children}\r\n     </div>\r\n )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n   componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n   }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     return false;\r\n    // }\r\n    render(){\r\n       return (\r\n        <div>\r\n            <h1 className=\"title\">Finstapics</h1>\r\n        </div>\r\n       )\r\n    }\r\n}\r\n\r\nexport default Header;","import  React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\n\r\nimport {setSearchField, requestImages} from '../actions';\r\n\r\n   const mapStateToProps = state => {\r\n     return {\r\n       searchField: state.searchImages.searchField,\r\n       images: state.requestImages.images,\r\n       isPending: state.requestImages.isPending,\r\n       error: state.requestImages.error\r\n     }\r\n   }\r\n\r\n   const mapDispatchToProps = (dispatch) => {\r\n     return{\r\n      onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n      onRequestImages: () => dispatch(requestImages())\r\n     }\r\n   }\r\n\r\n   \r\n    class App extends Component {\r\n\r\n      \r\n\r\n      componentDidMount() {\r\n       this.props.onRequestImages();\r\n      }\r\n\r\n     \r\n     \r\n      \r\n      \r\n\r\n      render(){\r\n        const { onSearchChange,images, searchField, isPending} = this.props;\r\n         console.log(images)\r\n        \r\n          //filter function is used filter the names in order to find an item\r\n         const filteredImages = images.filter(image => {\r\n          return image.user.first_name.toLowerCase().includes(searchField.toLowerCase())\r\n          \r\n          })\r\n        \r\n        \r\n         if(isPending)\r\n         {\r\n            return <h1>Loading</h1>\r\n           \r\n         }else{\r\n           return (\r\n          <div>\r\n              <Header />\r\n              <SearchBox searchChange={onSearchChange}/>\r\n              <Scroll>\r\n              <ErrorBoundry>\r\n                <CardList data={filteredImages}/>\r\n              </ErrorBoundry>\r\n              </Scroll>\r\n          </div>\r\n           )\r\n         \r\n         }\r\n         \r\n        \r\n        \r\n      }\r\n      \r\n\r\n    }\r\n\r\n    export default connect(mapStateToProps, mapDispatchToProps)(App);","import axios from 'axios';\r\n\r\nimport {CHANGE_SEARCH_FIELD,\r\n        REQUEST_IMAGES_PENDING,\r\n        REQUEST_IMAGES_SUCCESS,\r\n        REQUEST_IMAGES_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\n\r\nexport const requestImages = () => {\r\n    return (dispatch) => {\r\n    dispatch({type: REQUEST_IMAGES_PENDING});\r\n     axios.get(`https://api.unsplash.com/photos/?client_id=${process.env.REACT_APP_API_KEY}`)\r\n      .then(response => {\r\n        dispatch({type: REQUEST_IMAGES_SUCCESS, payload: response.data})\r\n    })\r\n    .catch(error => dispatch({type: REQUEST_IMAGES_FAILED, payload: error})\r\n    )\r\n }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// export const requestImages = () => (dispatch) => {\r\n    \r\n//     dispatch({type: REQUEST_IMAGES_PENDING});\r\n//     fetch(`https://api.unsplash.com/photos/?client_id=${process.env.REACT_APP_API_KEY}`)\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         dispatch({type: REQUEST_IMAGES_SUCCESS, payload: data})\r\n//     })\r\n//     .catch(error => dispatch({type: REQUEST_IMAGES_FAILED, payload: error})\r\n//     )\r\n\r\n// }","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_IMAGES_PENDING = 'REQUEST_IMAGES_PENDING';\r\nexport const REQUEST_IMAGES_SUCCESS = 'REQUEST_IMAGES_SUCCESS';\r\nexport const REQUEST_IMAGES_FAILED = 'REQUEST_IMAGES_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\r\n        REQUEST_IMAGES_PENDING,\r\n        REQUEST_IMAGES_SUCCESS,\r\n        REQUEST_IMAGES_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchImages = (state=initialStateSearch, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload}\r\n            default:\r\n                return state; \r\n    }\r\n}\r\n\r\nconst initialStateImages = {\r\n    isPending: false,\r\n    images: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestImages = (state=initialStateImages, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_IMAGES_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_IMAGES_SUCCESS:\r\n            return Object.assign({}, state, {images: action.payload, isPending: false})\r\n        case REQUEST_IMAGES_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchImages, requestImages } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchImages, requestImages})\n//store is a big js object that describes the state of our app\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(<Provider store={store}>\n                    <App/>\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}